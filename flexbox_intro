below to be moved to github flex_intro file.

Intro: You want to be more intuitive with flexbox so the first port of call is https://css-tricks.com/snippets/css/a-guide-to-flexbox/ and using this file for your notes as your progress through the guide.

#
You are using blueLaptop>projects/site styling/CSS FLEX>training.html for practice. Content can then be added to this page when understood.

Source: https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-background

#
Once done, go back to gtcoding and work through the code to understand it better. Useful code snipets can be added to:
blaptop>projects/site styling>code snipets and eventually updated to the github css repo in its own file.
Use this file for working through gt coding code:
Projects/Site Styling/Evans Cycles/gtcoding example

#
Apply flexbox to copied sites (BBC, Evans cycles etc) seeing if gt code can be used.
#
Try coding same site with non flexbox, ie floats and margin-auto etc to get used to both.


NOTES FROM CSS TRICKS PAGE
Flexbox, by nature is direction-agnostic (doesn't asume a specific vertical or horizontal flow) Unlike block (vertical) and inline (horizontal) elements in standard css.

Flexbox or Grid?
Flexbox = Components of an application, and small-scale layouts. 
Grid = Larger scale layouts.




Flex-flow directions replace the regular Block and Inline css Layouts 

Container: The container that holds the items to be 'flexed' AKA the Flex Container, the Parent.
Items: The items within the container. AKA, Items, Content.

(My Notes)
#####
A little reminder of block and inline elements is helpful here.
With non-flexbox css, you can set say h1 elements to be inline  h1 {display:inline;} The default is 'block' for h1,2,3... and paragraphs.
In this case, you are targeting the specific item to be inline. 

The flex-direction property determines a horizontal or vertical flow of content. 
#####

Properties of the container.
display:  flex; |or|  inline-flex; (Not  currently sure about the difference between flex and inline flex).

Where a “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. 

Think of it as a cross placed in the centre of the page. 

The line from left to right = Main Axis  (Main start to Main end)
The line from top to bottom = Cross Axis (Cross start to Cross end)

issues:
With the flex-direction:row,  rule, the items overflow the container with the folowing straightforward code
So with container display:flex; width:200px; items will overflow the container either with (default)row  or  even when it's explicitly declared (flex-direction:row)
BELOW FIXES THIS.
Below is a quote from the guide.
"By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property: 
flex-wrap: nowrap | wrap | wrap-reverse;  (All fairly self explanatory)
Shorthand rule to deal with this:
This is a shorthand rule for the flex-direction and flex-wrap properties, which together, define the flex container’s main and cross axes. The default value is row nowrap.

.container {
  flex-flow: column wrap; |or| row wrap;
}
A final note from me here is that wrap happens by default with columns. So no matter how far you expand vertically, the container always encompasses all of its items.  (display:flex; flex-direction:column; [no wrap rule required]). I have a feeling this may be stating the obvious but thought i would add it here for reference.

I should mention here that the  display:flex;  rule is still needed at the beginning.
stopped here on guide page
flex-flow

This is interesting
display:flex; flex-flow: wrap;
Here you missed out  column  or  row  just before  wrap. 
I presume this means that the default   row    applies in the     display:flex    rule    an the   flex-flow    rule works with just having the    wrap    value. 



















