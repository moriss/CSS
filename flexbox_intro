Contents: Intro, training.html,  Flexbox Web page Resource, NOTES FROM CSS TRICKS PAGE >Introduction, Flexbox or Grid, Flex-flow v Block and Inline, Container, Items,  Block and Inline reminder,  Properties of the container,  Flex-flow directions,  
Overflowing the container,  Default Wrap,  This is interesting,   Justify Content,  Other Justify Content values,   safe and unsafe values ,  Align Items, 

Intro: You want to be more intuitive with flexbox so the first port of call is https://css-tricks.com/snippets/css/a-guide-to-flexbox/ and using this file for your notes as your progress through the guide.

#
training.html
You are using blueLaptop>projects/site styling/CSS FLEX>training.html for practice. Content can then be added to this page when understood. Also add to  flexbox_snipets  in a more condensed way with explanations.

Flexbox Web page Resource
Source: https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-background
You are using this source to make notes below and to also copy and paste important text/explanations.



NOTES FROM CSS TRICKS PAGE
Introduction:
Flexbox, by nature is direction-agnostic (doesn't asume a specific vertical or horizontal flow) Unlike block (vertical) and inline (horizontal) elements in standard css.

Flexbox or Grid?
Flexbox for Components of an application, and small-scale layouts. 
Grid for Larger scale layouts.



Flex-flow v Block and Inline
Flex-flow directions replace the regular Block and Inline css Layouts 


Container: 
The container that holds the items to be 'flexed' AKA the Flex Container, the Parent.
Items: 
The items within the container. AKA, Items, Content.



Block and Inline reminder
#####
A little reminder of block and inline elements is helpful here.
With non-flexbox css, you can set say h1 elements to be inline  h1 {display:inline;} The default is 'block' for h1,2,3... and paragraphs.
In this case, you are targeting the specific item to be inline. 

The flex-direction property determines a horizontal or vertical flow of content. 
#####

Properties of the container.
display:  flex; |or|  inline-flex; (Not  currently sure about the difference between flex and inline flex).


Flex-flow directions:
Where a “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. 

Think of it as a cross placed in the centre of the page. 

The line from left to right = Main Axis  (Main start to Main end)
The line from top to bottom = Cross Axis (Cross start to Cross end)



Overflowing the container:
With the flex-direction:row,  rule, the items overflow the container with the folowing straightforward code
So with container display:flex; width:200px; items will overflow the container either with (default)row  or  even when it's explicitly declared (flex-direction:row)
BELOW FIXES THIS.
Below is a quote from the guide.
"By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property: 
flex-wrap: nowrap | wrap | wrap-reverse;  (All fairly self explanatory)
Shorthand rule to deal with this:
This is a shorthand rule for the flex-direction and flex-wrap properties, which together, define the flex container’s main and cross axes. The default value is row nowrap.

.container {
  flex-flow: column wrap; |or| row wrap;
}

Default Wrap:
A final note from me here is that wrap seems to happen by default with columns. So no matter how far you expand vertically, the container always encompasses all of its items.  (display:flex; flex-direction:column; [no wrap rule appears to be required]). I have a feeling this may be stating the obvious but thought i would add it here for reference.

I should mention here that the  display:flex;  rule is still needed at the beginning.



This is interesting
display:flex; flex-flow: wrap;
Here you missed out  column  or  row  just before  wrap. 
I presume this means that the default   row    applies in the     display:flex    rule    an the   flex-flow    rule works with just having the    wrap    value. 



Justify Content,
This defines the alignment along the main axis.
jusfify-content:flex-start  |  flex-end  | center  |  space-between  |  space-around  |  space-evenly  |
                |||                 |||      ||       |    ||      |

Other Justify content values:
start: items are packed toward the start of the writing-mode direction.
end: items are packed toward the end of the writing-mode direction.
The safest values are flex-start, flex-end, and center.

safe and unsafe:
There are also two additional keywords you can pair with these values: safe and unsafe. 
Using safe ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”).


Align Items   I think the following:(For single horizontal lines of content with no wrap) [see 'align-content' below instead, for multi-line flexible containers]
This is kind of a 'How They Hang' (my quote) 
It is how things are laid out along the cross axis. 
The different options display a vertical movement of the objects to aligh them in a way that the rule demands. 
So this movement is North to South or up and down. 
.container {
  align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;
}

IMPORTANT!
Baselin option seems to match up the first line of text of each item horizontaly. 


STOPPED HERE
align-content   For multi-line flexible containers. (Use 'align-items' above for single line flexible containers)
This property only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse). This will not work with a single-line flexible container (i.e. where flex-wrap is set to its default value of no-wrap).
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe

















