Local Location: Blue/Desktop/CSS FLEX>style_story

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

changed

As a starting point you have been working on cloneing githubs repos to your local laptop. Immediately below is a quick start for updating repos to github. Further down the page shows you how to clone.
This is the shortcut to update from local to github. You need to put this where it can be easily accessible to all repos.
@@@@
git add .    or   git add <filename>
git commit -m "Note for yourself here"
git push -u origin main   (main being the name of the branch you wish to push to)
username:
Password   ghp_rIWGIfchair0ZgzYYyeXDiDn4Q4v7RGiua0bbat2JN  self encrypted!

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

use:  git branch  to check what branches you have available. 
@@@@


You cloned the CSS github repo after pasting updates from local and adding any new files so everything is updated. 

I used chatgpt to help me  Title:Clone GitHub repo locally.

Command: git clone https://github.com/moriss/CSS
The URL was taken from clicking   '<>code'   on the github menu then pasting the url into the command line as above.

The official name of the locally cloned directory is simply CSS.


STOPPED HERE

ADD, COMMIT AND PUSH
You then pushed all updated files to github. 
The chatgpt title is  'Change Filename'  for more instructions.

Please note, you need a personal access token to link your local repository to github via the terminal window.

This is how you got one: (Please note you can use an existing pat unless it has expired).
github/your profile picture/settings/developer-settings/ personal access token/tokens-classic/generate new token. Complete all the boxes for now then select "generate token" The token will show at top of page and is copyable. You can never see the token again on github so you need to save it somewhere else or generate a new one each time. 

Her is the token:  ghp_rIWGIfchair0ZgzYYyeXDiDn4Q4v7RGiua0bbat2JN    self encrypted!



Now this is what you did to begin the update process.
git add .    This stages ALL files (making them ready to commit). To stage specific files, add them one by one by filename.

git commit -m "You comment here"    This commits(updates) effecticely step two.



You may need to link your local repo to github (if not already done so)
git remote add origin https://github.com/moriss/CSS.git

If it says this: fatal: remote origin already exists. Then it doesn't need to be linked.



The push command was the next thing you did. 

git push -u origin <name of branch>

To find out what branch you want to push it to use the following comand (locally) for a list of branch names.

git branch

In my case on  * main came up so just used that.

The push command:
git push -u origin main


Where you were prompted for username and password, you used your personal access token instead of your password.


This is my latest generated token. It was done via github/profile picture/settings/developer setting/personal access token/generate token.
ghp_rIWGIfchair0ZgzYYyeXDiDn4Q4v7RGiua0bbat2JN  (self encrypted!).
I think I set it to expire in 30 days.


News about password authentication that subsequently requires a PAT.
###
remote: Support for password authentication was removed on August 13, 2021.
remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.
###

END OF ADD, COMMIT AND PUSH






For below, create a new file in github css for any new stuff you come across. Items can get deleted when considered no longer new.
This can also be used for error notes.


Journey notes note:
Before we get into below, I came across a historical issue where a container will not cover its children when they are floated or perhaps positioned in a certain way. Ie taken out of the natrual flow. The way to deal with this is by clearing the floats before the end of the container div.
</div class  ="container">
container's children are here!
<div class="clear"></div> The css would be .clear{clear:both;}
</div> end of container div



WORKING ON THE BBC WEBSITE
::before  WITHOUT FLEXBOX
In copying the bbc site I was working on the following section:

  "Post office scandal ----------------see all"   
  
  The line lies centraly between the text and covers the entire page. I tried doing it without flexbox and this is where I got to:
I needed to set the children to display:inline;(NOT the container)  so the two children displayed inline. 

I then needed to set the ::before psuedo element to content:""; which defaults to a space, display:inline-block, to allow a height to be applied to the space. (display:block doesn't work as it puts the line above the text as its own block element). I then set a width:300px; or whatever width you would like and a height of 1px and a background to black to make it visible.

The problems that remain are: 
having the line horizontally central to the text and 
automatically spanned across the whole page but stopping before  "see all" 

And this is WITH FLEXBOX
.container2 {display:flex; }  /**title and see all are set to display flex**/
    .see_all  {display:flex; align-items:center; flex:1 1 auto; }  /**see all and ::before are set to display flex**/
    .see_all::before {content: ""; flex-grow:1; height:1px; background:black; margin:0 10px 0 10px;}  /**flex grow is required to have it span across the page as it specifically targets the psuedo element, the height gives the psuedo empty space a height and the background makes it black. The result is a 1pixel line that stretches all the way across the page but **/





10th January 2024
If you set a float-right property in a text div then add a width rule of 10% etc, the text seems to fall to the next line when you drag the screen size smaller. Ommiting the width property seems to keep the text on the same line. 

Clearing floats:
footer {clear:both}
This stops ie float left where you want it to stop. 

display:inline-block >Compared to display:inline, this allows you to set a width and height on the element.

New

.container {
display: flex;
...
gap: 10px;
gap: 10px 20px; /* row-gap column gap */
row-gap: 10px;
column-gap: 20px;
}
