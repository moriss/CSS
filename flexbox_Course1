Todays work for css flexbox
If any changes are made below, you must update github then delete below.



Todays work
If any changes are made below, you must update github then delete below.
21st November 2023
https://github.com/moriss/CSS/edit/main/flexbox_Course1

Contents: 
General Notes
NOTES FROM CSS TRICKS PAGE >Introduction 
Flexbox or Grid
Flex-flow v Block and Inline
Container
Items
Block and Inline reminder
Properties of the container
Flex-flow directions 
Overflowing the container
Default Wrap
This is interesting
Justify Content
Other Justify Content values
safe and unsafe values
Align Items, 

General Notes:
@@@
You want to be more intuitive with flexbox so the first port of call is https://css-tricks.com/snippets/css/a-guide-to-flexbox/ and using this file for your notes as you progress through the guide. This s also saved as a pfd in blueLaptop>projects/site styling/CSS FLEX>

You are using blueLaptop>projects/site styling/CSS FLEX>training.html for practice. Content can then be added to this page when understood. Also add to  flexbox_snipets  in a more condensed way with explanations.
@@@



NOTES FROM CSS TRICKS PAGE AND MY THOUGHTS
Introduction:
Flexbox, by nature is direction-agnostic (doesn't asume a specific vertical or horizontal flow) Unlike block (vertical) and inline (horizontal) elements in standard css.

Flexbox or Grid?
Flexbox for Components of an application, and small-scale layouts. 
Grid for Larger scale layouts.



Flex-flow v Block and Inline
Flex-flow directions replace the regular Block and Inline css Layouts 


Container:
The container that holds the items to be 'flexed' AKA the Flex Container, the Parent.
Items:
The items within the container. AKA, Items, Content.



Block and Inline reminder
#####
A little reminder of block and inline elements is helpful here.
With non-flexbox css, you can set say h1 elements to be inline  h1 {display:inline;} The default is 'block' for h1,2,3... and paragraphs.
In this case, you are targeting the specific item to be inline. 

The flex-direction property determines a horizontal or vertical flow of content. 
#####

Properties of the container.
display:  flex; |or|  inline-flex; 
flex gives the container the full width of the screen/parent.
inline-flex only gives the container the required width for it's child elements. 



Flex-flow directions:
Where a “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. 

Think of it as a cross placed in the centre of the page. 

The line from left to right = Main Axis  (Main start to Main end)
The line from top to bottom = Cross Axis (Cross start to Cross end)


Overflowing the container:
With the flex-direction:row  rule, the items overflow a fixed width container. 
So with container display:flex; width:200px; items will overflow the container either with (default)row  or  even when it's explicitly declared (flex-direction:row)
BELOW FIXES THIS.
Below is a quote from the guide.
"By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property:
flex-wrap: nowrap | wrap | wrap-reverse;  (All fairly self explanatory)
Shorthand rule to deal with this:
This is a shorthand rule for the flex-direction and flex-wrap properties, which together, define the flex container’s main and cross axes. The default value is row nowrap.

.container {
 display:flex;  flex-flow: column wrap; |or| row wrap;
}
Not that you still need display:flex; when using the flex-flow shorthand. And given that display:flex defaults to row, you don't actually need the 'row' in flex-flow.



Justify Content,
This defines the alignment along the main axis.
jusfify-content:flex-start  |  flex-end  | center  |  space-between  |  space-around  |  space-evenly  |
                |||                 |||      ||       |    ||      |

Other Justify content values:
start: items are packed toward the start of the writing-mode direction.
end: items are packed toward the end of the writing-mode direction.
The safest values are flex-start, flex-end, and center.

safe and unsafe:
There are also two additional keywords you can pair with these values: safe and unsafe. 
Using safe ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”).




This is for aligning items on the cross axis, so align-items: center; has items vertically centered inside the parent element. 
This used to be a big problem pre flexbox where it was not so easy to align in this way. (Centered horizontaly AND verticaly.
You would then add justify-content: center; to have it centered both in the main and cross axis.
So the key way to remember this is JAI. J for justify content and ai for align items.



So this movement is North to South or up and down. 
.container {
  align-items: *stretch | flex-start | flex-end | center | baseline[aligns text] | first baseline | last baseline[along the bottom] | start | end | self-start | self-end + ... safe | unsafe;
}

*stretch might be the default?

IMPORTANT!
Baseline option seems to match up the first line of text of each item horizontaly but issues are caused when an image is used in place of the first line of text.



align-content   This is for the up and down positioning of a cluster (multiple rows) of elements. You need to ensure the container is high enough to see the effects.
This property only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse). This will not work with a single-line flexible container (i.e. where flex-wrap is set to its default value of no-wrap).

align-content: 
flex-start | flex-end |   These are up and down positionings and not left to right


center[Vertically centered] | space-between[up and down space between] | space-around[vertically again] | space-evenly[vertically] | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe






GAP: You have just pasted below from the resource. You haven't applied it anywhere yet. 
gap: Not exclusively for flexbox. Also used in grid and multi-column layout.
Explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. 
.container {
  display: flex;
  ...
  gap: 10px;
  gap: 10px 20px; /* row-gap column gap */
  row-gap: 10px;
  column-gap: 20px;
}


TEST OUT BELOW THEN AD TO SNIPETS

PROPERTIES FOR THE CHILDREN:
(flex items)

I'm using a tutorial here to better understand the properties for children
https://www.youtube.com/watch?v=sanswTlz4ZY
4.29 in.


Examples.
flex:1; All items asigned a value of flex:1; will take up equal ammounts of the available space.
flex:2; This item takes twice the available space as an item asigned flex:1;



More Examples 
item 1  flex: 1;
item 2  flex: 0;
So Item 1 takes up all the available space and item 2 takes none of the available space.
If item 1 has a flex grow of 1 and item 2 has a flex grow of 2,  item 2 grows twice as much as item 1. It will take up twice as much of the available space than that of item 1.

Ok so there's a slight complication we need to clarify. flex: 1 actually results in flex-grow: 1; , flex-shrink: 1; , flex-basis: 0;. 
So with flex:1; you have instructed flex-grow to be set at 1[default is zero] and the other two (shrink and bases) just default to 1 and zero respectively.


So this brings us onto Shorthand
flex: 1 1 200px; This is shorthand for flex grow, shrink and basis (gsb). The default values are 0, 1 and auto respectively, as mentioned above.







Lets read a quote from css tricks to further clarify.
flex-grow
.item {
  flex-grow: 4; /* default 0 */
}
This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.

If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, that child would take up twice as much of the space either one of the others (or it will try, at least).


flex-shrink

This defines the ability for a flex item to shrink if necessary. If all items are set to (the default) 1, They will shrink in equal proportion.
If an item is set to flex-shrink: 0; then it will not shrink as other items with a shrink value of 1 or above.

.item {
  flex-shrink: 3; /* default 1 */
}


flex-basis

This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren max-content, min-content, and fit-content do.

.item {
  flex-basis:  | auto; /* default auto */
}




flex

This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters (flex-shrink and flex-basis) are optional. The default is 0 1 auto, but if you set it with a single number value, like flex: 5;, that changes the flex-basis to 0%, so it’s like setting flex-grow: 5; flex-shrink: 1; flex-basis: 0%;.

.item {
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}

It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently.
Please note, if you set flex to a single number ie flex:2; then the bases changes from its default 'auto' to zero.






order
You can target an item and set what order you want it to be placed in a sequence of items. But read this carefully!...
.item {
  order: 5; /* default is 0 */
}
Since the default is 0, if you only set one item to an order value which is above 0, then it will always come last since all other items are defaulted to 0. So if you want it first then you need to set the order to -1. This is from my experience of trying it.

By the way, this is a quick way to reference a specific child
.container >:nth-child(2) {order:2;}
and I like it!





align-self
One item with an align-self value is -for example- positioned along the bottom of a flex parent instead of the top where all the rest of the items are.
To see this in action, you may have to set a height value for the container.


In other words, align self allows the default alignment (or the one specified by the align-items property) to be overridden for individual flex items.

Please see the align-items explanation to understand the available values.

.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}

Note that float, clear and vertical-align have no effect on a flex item.


Some notes before we get into some practice
As a general point, with the default row, the main axis starts on the left and moves right whilst the cross axis starts at the top then moves down.

For this example we will use  .container as the container and .items  as the containers children.

.container {display:flex; 
Default: the items are laid out one after another from left to right and topmost of the container. 
width:100%  The container will evenly spread it's children 100% across its width.

}

container > * { This is a quick way to reference ALL the container's children.
width:150px; All items will have a fixed width of this.
}

To be a bit show-offy, you can use the following
.container > :nth-child(2) {flex:1;}
So the first colon refers to styling applying to the (>) children of the .container and the (2) refers to the second child element.

A side not: Regarding the '>' symbol to target child elements.  (.container > ) This is not enough. You need to specify which children you wish to target. To target ALL children you use the * operator (.container > * {} ). In the example above, you are targeting the second child.






IMAGES, IMAGES, IMAGES.
Ok, so this was not straight forward at the beginning....


STAND-ALONE IMAGES
When you have stand-alone images that you want to spread evenly along a row.
You initialy want to use   object-fit:cover;  to the  image so it maintains aspect ratio. Although this makes no visible difference when I used it!
flex:1; Allows the images to grow and fill the available space proportionally. If an image is smaller in dimensions it will grow to fill the space possibly making it blurry.





IMAGES IN CONTAINERS
Images inside there own individual container:
.container {display:flex; flex-flow: nowrap;}
    .container div {flex:1;   display:flex; flex-flow: column nowrap; border:1px solid grey;}
    .container div > * {flex:1 1 auto;} Here, the div's children are set to grow by 1 to fill the available space, shrink by 1 and have a flex bases of 0%.






IMAGES WITH TEXT
If images have differet heights, You can set them to a specific height:
.item img {height:150px; object-fit:cover; } 
You can also use   object-fit :cover;   which maintains the aspect ratio of the image.
To be honest, when I take away the object fit property, it doesn't make any difference. It still fits fine just using the height property. But I would advise using it anyway.


NOW IT'S TIME FOR SOME PRACTICE
You are working with projects/site styling/css/css flex/site1



PRACTICE NOTES
23 dec 23
Despite previous issues, I seem to have been able to set images neatly alon a row with corresponding text beneath.



STOPPED HERE



You are taking resources from blue/desktop/projects/site styling/bbc

Opening files in terminal.
This needs to be added to the terminal comands git file. 
maurizio@maurizio-Inspiron-11-3162:~/Desktop/Projects/Site Styling/css/CSS FLEX/site_1$ google-chrome /home/maurizio/Desktop/Projects/'Site Styling'/css/'CSS FLEX'/site_1/index.html


TERMINAL COMMAND ALERT
Where it starts at google-chrome, you are able to open a file in the chrome browser by adding the full path to the file. Be sure to ad inverted comas to any folder or filename with space separated words. 



