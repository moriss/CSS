Contents: 
General Notes
NOTES FROM CSS TRICKS PAGE >Introduction 
Flexbox or Grid
Flex-flow v Block and Inline
Container
Items
Block and Inline reminder
Properties of the container
Flex-flow directions 
Overflowing the container
Default Wrap
This is interesting
Justify Content
Other Justify Content values
safe and unsafe values
Align Items, 

General Notes:
@@@
You want to be more intuitive with flexbox so the first port of call is https://css-tricks.com/snippets/css/a-guide-to-flexbox/ and using this file for your notes as your progress through the guide. This s also saved as a pfd in blueLaptop>projects/site styling/CSS FLEX>

You are using blueLaptop>projects/site styling/CSS FLEX>training.html for practice. Content can then be added to this page when understood. Also add to  flexbox_snipets  in a more condensed way with explanations.
@@@



NOTES FROM CSS TRICKS PAGE AND MY THOUGHTS
Introduction:
Flexbox, by nature is direction-agnostic (doesn't asume a specific vertical or horizontal flow) Unlike block (vertical) and inline (horizontal) elements in standard css.

Flexbox or Grid?
Flexbox for Components of an application, and small-scale layouts. 
Grid for Larger scale layouts.



Flex-flow v Block and Inline
Flex-flow directions replace the regular Block and Inline css Layouts 


Container:
The container that holds the items to be 'flexed' AKA the Flex Container, the Parent.
Items:
The items within the container. AKA, Items, Content.



Block and Inline reminder
#####
A little reminder of block and inline elements is helpful here.
With non-flexbox css, you can set say h1 elements to be inline  h1 {display:inline;} The default is 'block' for h1,2,3... and paragraphs.
In this case, you are targeting the specific item to be inline. 

The flex-direction property determines a horizontal or vertical flow of content. 
#####

Properties of the container.
display:  flex; |or|  inline-flex; 
flex gives the container the full width of the screen/parent.
inline-flex only gives the container the required width for it's child elements. 

STOPPED HERE

Flex-flow directions:
Where a “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. 

Think of it as a cross placed in the centre of the page. 

The line from left to right = Main Axis  (Main start to Main end)
The line from top to bottom = Cross Axis (Cross start to Cross end)


Overflowing the container:
With the flex-direction:row  rule, the items overflow a fixed width container. 
So with container display:flex; width:200px; items will overflow the container either with (default)row  or  even when it's explicitly declared (flex-direction:row)
BELOW FIXES THIS.
Below is a quote from the guide.
"By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property:
flex-wrap: nowrap | wrap | wrap-reverse;  (All fairly self explanatory)
Shorthand rule to deal with this:
This is a shorthand rule for the flex-direction and flex-wrap properties, which together, define the flex container’s main and cross axes. The default value is row nowrap.

.container {
 display:flex;  flex-flow: column wrap; |or| row wrap;
}
Not that you still need display:flex; when using the flex-flow shorthand. And given that display:flex defaults to row, you don't actually need the 'row' in flex-flow.

STOPPED HERE


Justify Content,
This defines the alignment along the main axis.
jusfify-content:flex-start  |  flex-end  | center  |  space-between  |  space-around  |  space-evenly  |
                |||                 |||      ||       |    ||      |

Other Justify content values:
start: items are packed toward the start of the writing-mode direction.
end: items are packed toward the end of the writing-mode direction.
The safest values are flex-start, flex-end, and center.

safe and unsafe:
There are also two additional keywords you can pair with these values: safe and unsafe. 
Using safe ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”).


Align Items   I think the following:(For single horizontal lines of content with no wrap) [see 'align-content' below instead, for multi-line flexible containers]
This is kind of a 'How They Hang' (my quote) 
It is how things are laid out along the cross axis. 
The different options display a vertical movement of the objects to aligh them in a way that the rule demands. 
So this movement is North to South or up and down. 
.container {
  align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;
}

IMPORTANT!
Baselin option seems to match up the first line of text of each item horizontaly. 


align-content   For multi-line flexible containers. (Use 'align-items' above for single line flexible containers)
This property only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse). This will not work with a single-line flexible container (i.e. where flex-wrap is set to its default value of no-wrap).
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe


GAP: You have just pasted below from the resource. You haven't applied it anywhere yet. 
gap: Not exclusively for flexbox. Also used in grid and multi-column layout.
Explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. 
.container {
  display: flex;
  ...
  gap: 10px;
  gap: 10px 20px; /* row-gap column gap */
  row-gap: 10px;
  column-gap: 20px;
}


TEST OUT BELOW THEN AD TO SNIPETS

Properties for the Children
(flex items)
order
You can target an item and set what order you want it to be placed in a sequence of items.
.item {
  order: 5; /* default is 0 */
}



flex-grow
.item {
  flex-grow: 4; /* default 0 */
}
This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.

If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, that child would take up twice as much of the space either one of the others (or it will try, at least).


flex-shrink

This defines the ability for a flex item to shrink if necessary.

.item {
  flex-shrink: 3; /* default 1 */
}




flex-basis

This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren max-content, min-content, and fit-content do.

.item {
  flex-basis:  | auto; /* default auto */
}




flex

This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters (flex-shrink and flex-basis) are optional. The default is 0 1 auto, but if you set it with a single number value, like flex: 5;, that changes the flex-basis to 0%, so it’s like setting flex-grow: 5; flex-shrink: 1; flex-basis: 0%;.

.item {
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}

It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently.






align-self
One item with a align-self value is positioned along the bottom of a flex parent instead of the top where all the rest of the items are.


This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.

Please see the align-items explanation to understand the available values.

.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}

Note that float, clear and vertical-align have no effect on a flex item.
